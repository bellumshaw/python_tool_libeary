



first = 'tttt'
second = 'ffff'
first + second                #'ttttffff' 
first_twice = first * 2       #'tttttttt'
#字符串运算 + ， *


#调试
#程序错误包含：syntax error（语法错误）; runtime error（运行错误）; semantic error（语义错误）


import turtle              #for paint, the object will write dowm line

bob = turtle.Turtle()      #build a turtle object
bob.fd(100)            
#fd-forword, bk-back + length; lt-left, rt-right + angle.

def square(t):
    for i in range(4):
        t.fd(100)
        t.lt(90)
        
square(bob)         #将所有的代码封装（encapsulation)在一个函数中

def square(t,length):
    for i in range(4):
        t.fd(length)
        t.lt

#buil a function can use any length-----泛化（generalization)

def polygon(t,n,length):
    angle = 360/ n
    for i in range(n):
        t.fd(length)
        t.lt(angle)
        
#build a function which can paint Arbitrary polygon

import math
def circle(t,r):
    circumference = 2 * math.pi * r
    n = int (citcumference/3) +1
    length = circumference/n
    polygon(t,n,length)
    
def polylin(t,n, length, angle):
    for i in range(n):
        t.fd(length)
        t.lt(angle)
        
def polygon(t,n,length):
    angle = 360.0/n
    polyline(t,n,length,angle)
    
def arc(t,r,angle):
    arc_length = 2*math.pi*r*angle/360.0
    n = int(arc_length/3)+1
    step_length = arc_length/n
    step_angle = float(angle)/n
    polyline(t,n,step_length,step_angle)
    
def circle(t,r):
    arc(t,r,360)
 
#函数的接口是一份关于如何使用该函数的总结：形参是做
#什么的，函数是做什么的，如何让调用者避免处理不必要
#的细节，直接做自己想做的事，那么这个接口就是“干净的”

'''
开发方案（development plan）
①写一个没有函数定义的小程序开始
②一旦该程序正常运行，找出其中相关性强的部分，将它们封装进一个函数并给它一个名字
③通过增加适当参数，泛化改函数
④重复1~3步，
⑤寻找机会通过重构改进程序
'''

#地板除和求余
#floor division operator先做除法，然后将结果保留到整数位
105 // 60 # 1
105 % 60  #45 求余
#此外，也可获得一个数的最右边一位或多位的数字 x%10

#逻辑运算符logical operators : and , or , not

#条件语句：if , elif, else
#嵌套条件：一个条件嵌到另一个里面
#递归：一个函数调用自己
#键盘输入：input('...\n')   最后的\n表示换行

#增量式开发：每次只增加和测试少量代码
#布尔函数：函数可以返回布尔值

#调试
'''
将一个大程序分解为较小的函数为调试生成了自然的检查点。
如果一个程序不如预期的运行，有三个可能性需要考虑：
①该函数获得的实参有些问题，违反先决条件
②该函数有些问题，违反后置条件
③返回值或者它的使用方法有问题
方法：为了排除第一种可能，增加print来打印形参
在每个return之间增加print，来打印返回值
检查函数调用
'''

#调试
'''对分调试
将问题拆分两半
在代码中间或者附近的地方，寻找一个可以检查的中间值
加上一行print语句
当然，更要多考虑程序中哪些地方比较容易出问题
'''



#while语句
'''
while语句执行流程
①首先判断条件为真还是假
②如果为假，退出while语句，然后执行接下来的语句
③如果条件为真，则运行while语句体，运行完再返回第一步
这种形式的流程叫做循环（loop）


#string
#string is a sequence
'banana'[1]  # a
len('banana') # 6, but index is 0~5
#string can not change, it's immutable
greeting = 'Hello' 
#greeting[0] = 'J'   -- TypeError

greeting.find('l') # if finded, return the
#index, else return -1, can coordinate 
# with in

#when word compares another word, if 
#formor word is initials letter capitalization
a = 'banana'
c = 'pine'
b = 'Pine'
# b > a > c

#string methods
a = 'banana' # a is a string
b = 'Baby'
b.casefold()    #'baby'  lower case the leter
a.count('a')   # 3
a.encode('utf-8') #解码
a.endswith('n')   #return False
c = '123\t342\t234'
c.expandtabs()  # 
#str.isalnum()
#str.isdecimal()
#str.isdigit()
#str.islower()
#str.isnummer()
#str.isalpha()

c = 'AA'
d = 'abc'
d.join(c)  # 'aAAbAAc'

#a.lstrip()
#a.rstrip()
a.strip()

a.split(sep = None, maxsplit = 1)
a.splitlines()
a.title # 'Baby' 将所有单词首字母大写
f = '42'
f.zfill(5) # '00042'用0来填充宽度

#文件打开
fin = open('words.txt')  #文件名带后缀
for line in fin:
    word = line.strip()
    print(word)
fin.close()


#调试
#选择一组可以测试所有可能的单词集合，介于
#困难和不可能中间
#空字符串是一个特殊用例（special case)


#列表
#列表是由多个值组成的序列。在列表中，它可以
#存储任何数据类型，值称为元素或者项
#一个列表在另一个列表中，称为“嵌套列表”
#列表是可变的
#列表中可用in
# + 运算符可拼接多个列表
# * 重复多个列表
#增量赋值语句  total += x   ===  total = total + x
def capitalize_all(t):
    res = []
    for s in t:
        res.append(s.capitalize())
    return res
    #映射（map)

t = ['a','b','c']
x = t.pop(1)  # pop修改列表，并返回被移除的元素
#若不提供下标，将默认移除并返回最后一个元素

#若不要被移除的运算
del t[1]

t.remove('b')  #知道要删除的值，不知道其下标

s = 'spam'
r = list(s)    # r == ['s','p','a','m'] 
#list将一各字符串转换为字符的列表
#list将字符串分割成单独的字符
#若想将字符串分割成一些单词，用split
s = 'pining for the job'
t = s.split()   #['pining', 'for', 'the', 'job']
s = 'spam-spam-spam'
delimiter = '-'
t = s.split(delimiter) # ['spam', 'spam', 'spam']
#如果要再连接起来，用join
s = delimiter.join(t)

#列表相等不一定相同
#如果一个对象有多于一个的引用，我们称这个对象
#是有别名的，如果一个有别名的对象是可变的
s.append(3) # 添加元素并返回None

#列表调试
'''
大多数的列表方法会对参数进行修改，然后返回None，
在使用list方法和操作符前，可以仔细阅读文档，
然后在交互模式下测试
选择一种写法，坚持下去，比如，删除一个元素可以用
pop，remove,del
通过创建拷贝来避免别名
t2 = t[:]
t3 = sorted(t) #将t中元素按从小到大排列









